// <auto-generated />
using System;
using DataBaseManager.AppDataBase.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FootballMatchManager.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FootballMatchManager.AppDataBase.Models.ApUserTeamGame", b =>
                {
                    b.Property<int>("PkFkUserId")
                        .HasColumnType("int");

                    b.Property<int>("PkFkTeamGameId")
                        .HasColumnType("int");

                    b.Property<int>("PkFkUserType")
                        .HasColumnType("int");

                    b.HasKey("PkFkUserId", "PkFkTeamGameId", "PkFkUserType");

                    b.HasIndex("PkFkTeamGameId");

                    b.ToTable("APUSERTEAMGAME");
                });

            modelBuilder.Entity("FootballMatchManager.AppDataBase.Models.GameEvent", b =>
                {
                    b.Property<int>("PkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pkId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkId"));

                    b.Property<int?>("FkEntityId1")
                        .HasColumnType("int")
                        .HasColumnName("entityId1");

                    b.Property<int?>("FkEntityId2")
                        .HasColumnType("int")
                        .HasColumnName("entityId2");

                    b.Property<int?>("FkPlayerId")
                        .HasColumnType("int")
                        .HasColumnName("playerId");

                    b.Property<int?>("FkTeamId")
                        .HasColumnType("int")
                        .HasColumnName("teamId");

                    b.Property<int>("FkType")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<int>("GameId")
                        .HasColumnType("int")
                        .HasColumnName("gameId");

                    b.Property<string>("GameType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("gametype");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("time");

                    b.HasKey("PkId");

                    b.HasIndex("FkEntityId1");

                    b.HasIndex("FkEntityId2");

                    b.HasIndex("FkPlayerId");

                    b.HasIndex("FkTeamId");

                    b.HasIndex("FkType");

                    b.ToTable("GAMEEVENT");
                });

            modelBuilder.Entity("FootballMatchManager.AppDataBase.Models.GameEventType", b =>
                {
                    b.Property<int>("PkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pkId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkId"));

                    b.Property<string>("EventTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("eventtype");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("text");

                    b.HasKey("PkId");

                    b.ToTable("GAMEEVENTTYPE");

                    b.HasData(
                        new
                        {
                            PkId = 1,
                            EventTypeId = "goal",
                            Image = "default/event-goal.png",
                            Text = "Гол!"
                        },
                        new
                        {
                            PkId = 2,
                            EventTypeId = "yellowcard",
                            Image = "default/event-card.png",
                            Text = "Желтая карточка!"
                        },
                        new
                        {
                            PkId = 3,
                            EventTypeId = "redcard",
                            Image = "default/event-card.png",
                            Text = "Красная карточка!"
                        },
                        new
                        {
                            PkId = 4,
                            EventTypeId = "change",
                            Image = "default/event-change.png",
                            Text = "Замена!"
                        },
                        new
                        {
                            PkId = 5,
                            EventTypeId = "penalty",
                            Image = "default/event-penalty.png",
                            Text = "Пенальти!"
                        },
                        new
                        {
                            PkId = 6,
                            EventTypeId = "freekick",
                            Image = "default/event-free-kick2.png",
                            Text = "Штрафной удар!"
                        },
                        new
                        {
                            PkId = 7,
                            EventTypeId = "corner",
                            Image = "default/event-corner.png",
                            Text = "Углавой удар!"
                        },
                        new
                        {
                            PkId = 8,
                            EventTypeId = "assist",
                            Image = "default/event-assist.png",
                            Text = "Голевой пас!"
                        });
                });

            modelBuilder.Entity("FootballMatchManager.AppDataBase.Models.TeamGame", b =>
                {
                    b.Property<int>("PkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pkId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkId"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("adress");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("datetime");

                    b.Property<string>("FirstTeamGoals")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("firstteamgoals");

                    b.Property<int>("FkFirstTeamId")
                        .HasColumnType("int");

                    b.Property<int>("FkSecondTeamId")
                        .HasColumnType("int");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("format");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("SecondTeamGoals")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("secondteamgoals");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("PkId");

                    b.HasIndex("FkFirstTeamId");

                    b.HasIndex("FkSecondTeamId");

                    b.ToTable("TeamGame");
                });

            modelBuilder.Entity("FootballMatchManager.DataBase.Models.ApUser", b =>
                {
                    b.Property<int>("PkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pkid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkId"));

                    b.Property<int?>("AssistsQnt")
                        .HasColumnType("int")
                        .HasColumnName("assistsQnt");

                    b.Property<DateTime?>("Birth")
                        .HasColumnType("datetime2")
                        .HasColumnName("birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("firstname");

                    b.Property<int?>("GamesQnt")
                        .HasColumnType("int")
                        .HasColumnName("gamesQnt");

                    b.Property<int?>("GoalsQnt")
                        .HasColumnType("int")
                        .HasColumnName("goalsQnt");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("lastname");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("position");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("role");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sex");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.HasKey("PkId");

                    b.ToTable("APUSER");

                    b.HasData(
                        new
                        {
                            PkId = 1,
                            Email = "system",
                            FirstName = "default",
                            Password = "password",
                            Role = "system"
                        },
                        new
                        {
                            PkId = 2,
                            Email = "admin@mail.ru",
                            Password = "nEKhNG4zOncJBLKis3+n0w==",
                            Role = "system"
                        });
                });

            modelBuilder.Entity("FootballMatchManager.DataBase.Models.ApUserGame", b =>
                {
                    b.Property<int>("PkFkUserId")
                        .HasColumnType("int")
                        .HasColumnName("pkfkuserid");

                    b.Property<int>("PkFkGameId")
                        .HasColumnType("int")
                        .HasColumnName("pkfkgameid");

                    b.Property<string>("PkUserType")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("pkusertype");

                    b.HasKey("PkFkUserId", "PkFkGameId", "PkUserType");

                    b.HasIndex("PkFkGameId");

                    b.ToTable("APUSERGAME");
                });

            modelBuilder.Entity("FootballMatchManager.DataBase.Models.ApUserTeam", b =>
                {
                    b.Property<int>("PkFkTeamId")
                        .HasColumnType("int")
                        .HasColumnName("pkfkteamId");

                    b.Property<int>("PkFkUserId")
                        .HasColumnType("int")
                        .HasColumnName("pkfkuserid");

                    b.Property<int>("PkUserType")
                        .HasColumnType("int")
                        .HasColumnName("pkusertype");

                    b.HasKey("PkFkTeamId", "PkFkUserId", "PkUserType");

                    b.HasIndex("PkFkUserId");

                    b.ToTable("APUSERTEAM");
                });

            modelBuilder.Entity("FootballMatchManager.DataBase.Models.Comment", b =>
                {
                    b.Property<int>("PkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pkid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<int>("FkRecipientId")
                        .HasColumnType("int")
                        .HasColumnName("fkrecipientid");

                    b.Property<int>("FkSenderId")
                        .HasColumnType("int")
                        .HasColumnName("fksenderid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("text");

                    b.HasKey("PkId");

                    b.HasIndex("FkRecipientId");

                    b.HasIndex("FkSenderId");

                    b.ToTable("COMMENT");
                });

            modelBuilder.Entity("FootballMatchManager.DataBase.Models.Constant", b =>
                {
                    b.Property<int>("PkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pkid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkId"));

                    b.Property<int?>("DecValue")
                        .HasColumnType("int")
                        .HasColumnName("decvalue");

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("group");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("StrValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("strvalue");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("type");

                    b.HasKey("PkId");

                    b.ToTable("CONSTANT");

                    b.HasData(
                        new
                        {
                            PkId = 1,
                            Group = "notification",
                            Name = "addtogame",
                            StrValue = "Пользователь {user} присоединлся к матчу {game}",
                            Type = "text"
                        },
                        new
                        {
                            PkId = 2,
                            Group = "notification",
                            Name = "leavefromgame",
                            StrValue = "Пользователь {user} покинул матч {game}",
                            Type = "text"
                        },
                        new
                        {
                            PkId = 3,
                            Group = "notification",
                            Name = "requestforgame",
                            StrValue = "Пользователь {user} отправил запрос на участие в матче {game}. Разрешить?",
                            Type = "requestforgame"
                        },
                        new
                        {
                            PkId = 4,
                            Group = "notification",
                            Name = "dismissreqgame",
                            StrValue = "Пользователь {user} отклонил ваш запрос на участие в матче {game}",
                            Type = "text"
                        },
                        new
                        {
                            PkId = 5,
                            Group = "notification",
                            Name = "acceptreqgame",
                            StrValue = "Пользователь {user} принял ваш запрос на участие в матче {game}",
                            Type = "text"
                        },
                        new
                        {
                            PkId = 6,
                            Group = "notification",
                            Name = "requestforteam",
                            StrValue = "Пользователь {user} отправил запрос на присоединение к команде {team}. Разршеить?",
                            Type = "requestforteam"
                        },
                        new
                        {
                            PkId = 7,
                            Group = "notification",
                            Name = "acceptregteam",
                            StrValue = "Пользователь {user} принял ваш запрос на присоединение к команде {team}",
                            Type = "text"
                        },
                        new
                        {
                            PkId = 8,
                            Group = "notification",
                            Name = "dismissregteam",
                            StrValue = "Пользователь {user} отклонил ваш запрос на присоединение к команде {team}",
                            Type = "text"
                        },
                        new
                        {
                            PkId = 9,
                            Group = "notification",
                            Name = "errorreqteam",
                            StrValue = "Невозможно отпарвить запрос на присоединение к команде, так как вы уже являетесь участником 3 команд",
                            Type = "text"
                        },
                        new
                        {
                            PkId = 10,
                            Group = "notification",
                            Name = "teamreqsend",
                            StrValue = "Ваш запрос на присоединение к команде {team} отправлен",
                            Type = "text"
                        },
                        new
                        {
                            PkId = 11,
                            Group = "notification",
                            Name = "requestforteamgame",
                            StrValue = "{team} отправила запрос на присоединение к командному матчу {name}",
                            Type = "requestforteamgame"
                        },
                        new
                        {
                            PkId = 12,
                            Group = "notification",
                            Name = "teamgamereqsend",
                            StrValue = "Ваш запрос на присоединение к матчу отправлен",
                            Type = "text"
                        },
                        new
                        {
                            PkId = 13,
                            Group = "notification",
                            Name = "dismissreqteamgame",
                            StrValue = "Команда {team} отклонила ваш запрос на участие в матче {game}",
                            Type = "text"
                        },
                        new
                        {
                            PkId = 14,
                            Group = "notification",
                            Name = "acceptreqteamgame",
                            StrValue = "Команда {user} принял ваш запрос на участие в матче {game}",
                            Type = "text"
                        },
                        new
                        {
                            PkId = 15,
                            Group = "notification",
                            Name = "leaveteamgame",
                            StrValue = "Команда {team} покинула матч {game}",
                            Type = "text"
                        },
                        new
                        {
                            PkId = 16,
                            Group = "notification",
                            Name = "errorinviteteam",
                            StrValue = "Невозможно отправить приглашение на присоединение к команде, так как вы не являетесь организатором команды",
                            Type = "text"
                        },
                        new
                        {
                            PkId = 17,
                            Group = "notification",
                            Name = "requstforinviteteam",
                            StrValue = "Пользователь {user} приглашает вас присоединиться к команде {team}.",
                            Type = "requstforinviteteam"
                        },
                        new
                        {
                            PkId = 18,
                            Group = "notification",
                            Name = "teaminvitesend",
                            StrValue = "Ваше приглашение успешно отправлено!",
                            Type = "text"
                        },
                        new
                        {
                            PkId = 19,
                            Group = "notification",
                            Name = "dismissinviteteam",
                            StrValue = "Пользователь {user} отклонил ваше приглашение на присоединение к команде {team}.",
                            Type = "text"
                        },
                        new
                        {
                            PkId = 20,
                            Group = "notification",
                            Name = "acceptinviteteam",
                            StrValue = "Пользователь {user} принял ваше приглашение на присоединение к команде {team}.",
                            Type = "text"
                        },
                        new
                        {
                            PkId = 21,
                            Group = "notification",
                            Name = "acceptinviteteamsend",
                            StrValue = "Вы присоединились к команде {team}!",
                            Type = "text"
                        },
                        new
                        {
                            PkId = 22,
                            Group = "notification",
                            Name = "requesttoinvitegame",
                            StrValue = "Пользователь {user} приглашает вас принять участие в игре {game}",
                            Type = "requesttoinvitegame"
                        },
                        new
                        {
                            PkId = 23,
                            Group = "notification",
                            Name = "dismissinvitegame",
                            StrValue = "Пользователь {user} отклонил ваше приглашение на присоединение к матчу {game}.",
                            Type = "text"
                        },
                        new
                        {
                            PkId = 24,
                            Group = "notification",
                            Name = "acceptinvitegame",
                            StrValue = "Пользователь {user} принял ваше приглашение на присоединение к матчу {game}.",
                            Type = "text"
                        },
                        new
                        {
                            PkId = 25,
                            Group = "notification",
                            Name = "acceptinvitegamesend",
                            StrValue = "Вы присоединились к матчу {game}!",
                            Type = "text"
                        },
                        new
                        {
                            PkId = 26,
                            Group = "position",
                            Name = "forward",
                            StrValue = "Нападающий",
                            Type = "text"
                        },
                        new
                        {
                            PkId = 27,
                            Group = "position",
                            Name = "left midfielder",
                            StrValue = "Левый полузащитник",
                            Type = "text"
                        },
                        new
                        {
                            PkId = 28,
                            Group = "position",
                            Name = "right midfielder",
                            StrValue = "Правый полузащитник",
                            Type = "text"
                        },
                        new
                        {
                            PkId = 29,
                            Group = "position",
                            Name = "attacking midfielder",
                            StrValue = "Атакующий полузащитник",
                            Type = "text"
                        },
                        new
                        {
                            PkId = 30,
                            Group = "position",
                            Name = "central midfielder",
                            StrValue = "Центральный полузащитник",
                            Type = "text"
                        },
                        new
                        {
                            PkId = 31,
                            Group = "position",
                            Name = "holding midfielder",
                            StrValue = "Опорный полузащитник",
                            Type = "text"
                        },
                        new
                        {
                            PkId = 32,
                            Group = "position",
                            Name = "left defender",
                            StrValue = "Левый защитник",
                            Type = "text"
                        },
                        new
                        {
                            PkId = 33,
                            Group = "position",
                            Name = "right defender",
                            StrValue = "Правый защитник",
                            Type = "text"
                        },
                        new
                        {
                            PkId = 34,
                            Group = "position",
                            Name = "central defender",
                            StrValue = "Центральный защитник",
                            Type = "text"
                        },
                        new
                        {
                            PkId = 35,
                            Group = "position",
                            Name = "Goalkeeper",
                            StrValue = "Вратарь",
                            Type = "text"
                        },
                        new
                        {
                            PkId = 36,
                            Group = "notification",
                            Name = "requesttoinviteteamgame",
                            StrValue = "Команда {team} приглашает вашу команду принять участие в командном матче {game}",
                            Type = "requesttoinviteteamgame"
                        },
                        new
                        {
                            PkId = 37,
                            Group = "notification",
                            Name = "dismissinviteteamgame",
                            StrValue = "Команда {team} отклонил ваше приглашение на присоединение к командному матчу {game}.",
                            Type = "text"
                        },
                        new
                        {
                            PkId = 38,
                            Group = "notification",
                            Name = "acceptinviteteamgame",
                            StrValue = "Команда {team} приняла ваше приглашение на присоединение к командному матчу {game}.",
                            Type = "text"
                        },
                        new
                        {
                            PkId = 39,
                            Group = "notification",
                            Name = "acceptinviteteamgamesend",
                            StrValue = "Ваша команда присоединилась к матчу {game}!",
                            Type = "text"
                        });
                });

            modelBuilder.Entity("FootballMatchManager.DataBase.Models.Game", b =>
                {
                    b.Property<int>("PkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pkid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkId"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("adress");

                    b.Property<int?>("CurrPlayers")
                        .HasColumnType("int")
                        .HasColumnName("currplayers");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("datetime");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("format");

                    b.Property<int?>("MaxPlayers")
                        .HasColumnType("int")
                        .HasColumnName("maxplayers");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<int>("fkTournamentId")
                        .HasColumnType("int")
                        .HasColumnName("fktournamentid");

                    b.HasKey("PkId");

                    b.ToTable("GAME");
                });

            modelBuilder.Entity("FootballMatchManager.DataBase.Models.Message", b =>
                {
                    b.Property<int>("PkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pkid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkId"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("datetime");

                    b.Property<int>("EntityId")
                        .HasColumnType("int")
                        .HasColumnName("entityId");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("entityType");

                    b.Property<int>("FkSenderId")
                        .HasColumnType("int")
                        .HasColumnName("fksenderid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("text");

                    b.HasKey("PkId");

                    b.HasIndex("FkSenderId");

                    b.ToTable("MESSAGE");
                });

            modelBuilder.Entity("FootballMatchManager.DataBase.Models.Notification", b =>
                {
                    b.Property<int>("PkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PkId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<int>("FkRecipient")
                        .HasColumnType("int")
                        .HasColumnName("fkrecipientid");

                    b.Property<int>("FkSenderId")
                        .HasColumnType("int")
                        .HasColumnName("fksenderid");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("text");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("type");

                    b.HasKey("PkId");

                    b.HasIndex("FkRecipient");

                    b.HasIndex("FkSenderId");

                    b.ToTable("NOTIFICATION");
                });

            modelBuilder.Entity("FootballMatchManager.DataBase.Models.Team", b =>
                {
                    b.Property<int>("PkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pkid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkId"));

                    b.Property<int>("ConsededGoalsQntQnt")
                        .HasColumnType("int")
                        .HasColumnName("ConsededGoalsQnt");

                    b.Property<DateTime>("CrtDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("crtDate");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int>("DrawsQnt")
                        .HasColumnType("int")
                        .HasColumnName("DrawsQnt");

                    b.Property<int>("GamesQnt")
                        .HasColumnType("int")
                        .HasColumnName("GamesQnt");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Image");

                    b.Property<int>("LosesQnt")
                        .HasColumnType("int")
                        .HasColumnName("LosesQnt");

                    b.Property<int>("MemberQnt")
                        .HasColumnType("int")
                        .HasColumnName("MemberQnt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int>("ScordeGoalsQntQnt")
                        .HasColumnType("int")
                        .HasColumnName("ScoredGoalsQnt");

                    b.Property<int>("WinsQnt")
                        .HasColumnType("int")
                        .HasColumnName("WinsQnt");

                    b.HasKey("PkId");

                    b.ToTable("TEAM");

                    b.HasData(
                        new
                        {
                            PkId = 1,
                            ConsededGoalsQntQnt = 0,
                            CrtDate = new DateTime(2023, 5, 9, 15, 24, 57, 151, DateTimeKind.Local).AddTicks(1493),
                            DrawsQnt = 0,
                            GamesQnt = 0,
                            Image = "default/question.png",
                            LosesQnt = 0,
                            MemberQnt = 0,
                            Name = "",
                            ScordeGoalsQntQnt = 0,
                            WinsQnt = 0
                        });
                });

            modelBuilder.Entity("FootballMatchManager.AppDataBase.Models.ApUserTeamGame", b =>
                {
                    b.HasOne("FootballMatchManager.AppDataBase.Models.TeamGame", "TeamGame")
                        .WithMany("ApUserTeamGames")
                        .HasForeignKey("PkFkTeamGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballMatchManager.DataBase.Models.ApUser", "ApUser")
                        .WithMany("ApUserTeamGames")
                        .HasForeignKey("PkFkUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApUser");

                    b.Navigation("TeamGame");
                });

            modelBuilder.Entity("FootballMatchManager.AppDataBase.Models.GameEvent", b =>
                {
                    b.HasOne("FootballMatchManager.DataBase.Models.ApUser", "Entity1")
                        .WithMany("GameEventsEntity1")
                        .HasForeignKey("FkEntityId1")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FootballMatchManager.DataBase.Models.ApUser", "Entity2")
                        .WithMany("GameEventsEntity2")
                        .HasForeignKey("FkEntityId2")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FootballMatchManager.DataBase.Models.ApUser", "Player")
                        .WithMany("GameEvents")
                        .HasForeignKey("FkPlayerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FootballMatchManager.DataBase.Models.Team", "EventTeam")
                        .WithMany("GameEvents")
                        .HasForeignKey("FkTeamId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FootballMatchManager.AppDataBase.Models.GameEventType", "GameEventType")
                        .WithMany("GameEvents")
                        .HasForeignKey("FkType")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Entity1");

                    b.Navigation("Entity2");

                    b.Navigation("EventTeam");

                    b.Navigation("GameEventType");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FootballMatchManager.AppDataBase.Models.TeamGame", b =>
                {
                    b.HasOne("FootballMatchManager.DataBase.Models.Team", "FirstTeam")
                        .WithMany("FirstTeamsList")
                        .HasForeignKey("FkFirstTeamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FootballMatchManager.DataBase.Models.Team", "SecondTeam")
                        .WithMany("SecondTeamList")
                        .HasForeignKey("FkSecondTeamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FirstTeam");

                    b.Navigation("SecondTeam");
                });

            modelBuilder.Entity("FootballMatchManager.DataBase.Models.ApUserGame", b =>
                {
                    b.HasOne("FootballMatchManager.DataBase.Models.Game", "Game")
                        .WithMany("ApUsersGames")
                        .HasForeignKey("PkFkGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballMatchManager.DataBase.Models.ApUser", "ApUser")
                        .WithMany("ApUserGame")
                        .HasForeignKey("PkFkUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApUser");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("FootballMatchManager.DataBase.Models.ApUserTeam", b =>
                {
                    b.HasOne("FootballMatchManager.DataBase.Models.Team", "Team")
                        .WithMany("ApUserTeam")
                        .HasForeignKey("PkFkTeamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FootballMatchManager.DataBase.Models.ApUser", "ApUser")
                        .WithMany("Teams")
                        .HasForeignKey("PkFkUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApUser");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FootballMatchManager.DataBase.Models.Comment", b =>
                {
                    b.HasOne("FootballMatchManager.DataBase.Models.ApUser", "Recipient")
                        .WithMany("CommentsRecipients")
                        .HasForeignKey("FkRecipientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FootballMatchManager.DataBase.Models.ApUser", "Sender")
                        .WithMany("CommentSenders")
                        .HasForeignKey("FkSenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("FootballMatchManager.DataBase.Models.Message", b =>
                {
                    b.HasOne("FootballMatchManager.DataBase.Models.ApUser", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("FkSenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("FootballMatchManager.DataBase.Models.Notification", b =>
                {
                    b.HasOne("FootballMatchManager.DataBase.Models.ApUser", "Recipient")
                        .WithMany("NotificationsRecipients")
                        .HasForeignKey("FkRecipient")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FootballMatchManager.DataBase.Models.ApUser", "Sender")
                        .WithMany("NotificationsSenders")
                        .HasForeignKey("FkSenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("FootballMatchManager.AppDataBase.Models.GameEventType", b =>
                {
                    b.Navigation("GameEvents");
                });

            modelBuilder.Entity("FootballMatchManager.AppDataBase.Models.TeamGame", b =>
                {
                    b.Navigation("ApUserTeamGames");
                });

            modelBuilder.Entity("FootballMatchManager.DataBase.Models.ApUser", b =>
                {
                    b.Navigation("ApUserGame");

                    b.Navigation("ApUserTeamGames");

                    b.Navigation("CommentSenders");

                    b.Navigation("CommentsRecipients");

                    b.Navigation("GameEvents");

                    b.Navigation("GameEventsEntity1");

                    b.Navigation("GameEventsEntity2");

                    b.Navigation("Messages");

                    b.Navigation("NotificationsRecipients");

                    b.Navigation("NotificationsSenders");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("FootballMatchManager.DataBase.Models.Game", b =>
                {
                    b.Navigation("ApUsersGames");
                });

            modelBuilder.Entity("FootballMatchManager.DataBase.Models.Team", b =>
                {
                    b.Navigation("ApUserTeam");

                    b.Navigation("FirstTeamsList");

                    b.Navigation("GameEvents");

                    b.Navigation("SecondTeamList");
                });
#pragma warning restore 612, 618
        }
    }
}
